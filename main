import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.uix.slider import Slider
from kivy.uix.button import Button
from kivy.graphics import Color, Rectangle, RoundedRectangle
from kivy.config import Config
from kivy.core.window import Window
from kivy.uix.popup import Popup
from kivy.uix.filechooser import FileChooserListView
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.scrollview import ScrollView
from kivy.uix.textinput import TextInput
from kivy.uix.gridlayout import GridLayout
from kivy.clock import Clock
import random
import pyrebase
from datetime import datetime
import requests
import threading
import json

# --- Firebase Configuration ---
# IMPORTANT: Replace this with your project's configuration
firebaseConfig = {
    "apiKey": "AIzaSyCSsI9mTVgII6EqiXLfLczUs7gMEqlIgNQ",
    "authDomain": "radiology-8669e.firebaseapp.com",
    "databaseURL": "https://radiology-8669e-default-rtdb.firebaseio.com",
    "projectId": "radiology-8669e",
    "storageBucket": "radiology-8669e.firebasestorage.app",
    "messagingSenderId": "106030132370",
    "appId": "1:106030132370:web:15cf68bb6679e2736b0a4b"
}

# --- Gemini API Configuration ---
# IMPORTANT: Replace with your actual Google AI Studio API Key
GEMINI_API_KEY = "AIzaSyC3eugH4UIERVFjOoJvXX-SQFRhvmne-kE"


# --- UI Configuration ---
Window.clearcolor = (0.15, 0.15, 0.18, 1)

# --- Custom Themed Widgets ---
class ThemedButton(Button):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.background_normal = ''
        self.background_down = ''
        self.background_color = (0,0,0,0) # Use canvas for color
        self.border = (0,0,0,0)
        self.bind(pos=self.update_canvas, size=self.update_canvas)
        self.update_canvas()

    def update_canvas(self, *args):
        self.canvas.before.clear()
        with self.canvas.before:
            if self.state == 'down':
                Color(0.15, 0.45, 0.6, 1)
            else:
                Color(0.2, 0.6, 0.8, 1)
            RoundedRectangle(pos=self.pos, size=self.size, radius=[8])

class MessageBubble(BoxLayout):
    def __init__(self, text, is_user, **kwargs):
        super().__init__(**kwargs)
        self.orientation = 'horizontal'
        self.size_hint_y = None
        self.padding = (0, 0, 0, 10)
        self.bind(minimum_height=self.setter('height'))

        label = Label(
            text=text, markup=True, size_hint=(None, None),
            halign='left', valign='top', padding=(15, 10)
        )
        
        self.bind(width=lambda instance, value: setattr(label, 'text_size', (value * 0.7, None)))
        label.bind(texture_size=lambda *x: label.setter('size')(label, label.texture_size))
        
        with label.canvas.before:
            Color(rgba=(0.2, 0.6, 0.8, 1) if is_user else (0.25, 0.25, 0.3, 1))
            self.bg_rect = RoundedRectangle(radius=[15])
        label.bind(pos=lambda i,p: setattr(self.bg_rect, 'pos', p), size=lambda i,s: setattr(self.bg_rect, 'size', s))
        
        if is_user:
            self.add_widget(Label(size_hint_x=0.3))
            self.add_widget(label)
        else:
            self.add_widget(label)
            self.add_widget(Label(size_hint_x=0.3))

class RadiologyAssistant(App):
    def build(self):
        self.title = 'AI Radiology Assistant'
        
        try:
            self.firebase = pyrebase.initialize_app(firebaseConfig)
            self.db = self.firebase.database()
            print("Firebase Initialized Successfully")
        except Exception as e:
            self.firebase = None; self.db = None
            print(f"Firebase Initialization Failed: {e}")
        
        self.root_layout = BoxLayout(orientation='horizontal', padding=20, spacing=20)
        left_panel = self.build_control_panel()
        self.screen_manager = ScreenManager()
        self.screen_manager.add_widget(self.build_image_screen())
        self.screen_manager.add_widget(self.build_chat_screen())
        
        self.root_layout.add_widget(left_panel)
        self.root_layout.add_widget(self.screen_manager)

        return self.root_layout

    def build_control_panel(self):
        panel = BoxLayout(orientation='vertical', size_hint_x=0.35, spacing=15)
        
        title = Label(text="[b]Controls[/b]", markup=True, font_size='24sp', size_hint=(1, None), height=40)
        load_button = ThemedButton(text="Load Image", font_size='16sp', size_hint_y=None, height=50)
        load_button.bind(on_press=self.open_file_chooser)
        
        self.brightness_slider = Slider(min=-1, max=1, value=0, size_hint_y=None, height=40)
        self.brightness_slider.bind(value=self.on_slider_change)
        self.contrast_slider = Slider(min=-1, max=1, value=0, size_hint_y=None, height=40)
        self.contrast_slider.bind(value=self.on_slider_change)
        
        brightness_label = Label(text="Brightness", size_hint=(1, None), height=20, halign='left')
        brightness_label.bind(width=lambda i, w: setattr(i, 'text_size', (w, None)))
        contrast_label = Label(text="Contrast", size_hint=(1, None), height=20, halign='left')
        contrast_label.bind(width=lambda i, w: setattr(i, 'text_size', (w, None)))

        ai_title = Label(text="[b]AI Analysis[/b]", markup=True, font_size='22sp', size_hint=(1, None), height=40, halign='left')
        ai_title.bind(width=lambda i, w: setattr(i, 'text_size', (w, None)))
        
        self.analysis_result = Label(text="Load an image to analyze.", markup=True, font_size='15sp', halign='left', valign='top', size_hint=(1, 1))
        self.analysis_result.bind(size=lambda i, v: setattr(i, 'text_size', (i.width, None)))
        
        analyze_button = ThemedButton(text="Analyze Image", font_size='16sp', size_hint_y=None, height=50)
        analyze_button.bind(on_press=self.run_ai_analysis)
        
        self.toggle_button = ThemedButton(text="Switch to Chatbot", font_size='16sp', size_hint_y=None, height=50)
        self.toggle_button.bind(on_press=self.toggle_view)

        panel.add_widget(title)
        panel.add_widget(load_button)
        panel.add_widget(brightness_label)
        panel.add_widget(self.brightness_slider)
        panel.add_widget(contrast_label)
        panel.add_widget(self.contrast_slider)
        panel.add_widget(ai_title)
        panel.add_widget(self.analysis_result)
        panel.add_widget(analyze_button)
        panel.add_widget(Label(size_hint_y=0.05))
        panel.add_widget(self.toggle_button)
        
        return panel

    def build_image_screen(self):
        screen = Screen(name='image_viewer')
        panel = BoxLayout()
        self.image_display = Image(source='', fit_mode='contain')
        panel.add_widget(self.image_display)
        screen.add_widget(panel)
        return screen

    def build_chat_screen(self):
        screen = Screen(name='chatbot')
        layout = BoxLayout(orientation='vertical', spacing=10, padding=10)
        layout.add_widget(Label(text="[b]AI Chat Assistant[/b]", markup=True, font_size='24sp', size_hint_y=None, height=40))
        
        self.chat_history_grid = GridLayout(cols=1, spacing=5, size_hint_y=None)
        self.chat_history_grid.bind(minimum_height=self.chat_history_grid.setter('height'))
        
        scroll_view = ScrollView(bar_width=10, bar_color=(0.2, 0.6, 0.8, 1), scroll_type=['bars', 'content'])
        scroll_view.add_widget(self.chat_history_grid)

        input_layout = BoxLayout(size_hint_y=None, height=50, spacing=10)
        self.chat_input = TextInput(hint_text="Ask the AI a question...", font_size='16sp', multiline=False)
        self.chat_input.bind(on_text_validate=self.send_message)
        send_button = ThemedButton(text="Send", size_hint_x=0.2, font_size='16sp')
        send_button.bind(on_press=self.send_message)
        input_layout.add_widget(self.chat_input)
        input_layout.add_widget(send_button)
        
        layout.add_widget(scroll_view)
        layout.add_widget(input_layout)
        screen.add_widget(layout)
        
        initial_message = "Hello! I am an AI assistant specializing in radiology. How can I help you today?"
        self.chat_history_grid.add_widget(MessageBubble(text=initial_message, is_user=False))
        return screen
    
    def on_slider_change(self, instance, value):
        if not self.image_display.source: return
        brightness = self.brightness_slider.value
        contrast = self.contrast_slider.value
        contrast_factor = 1.0 + contrast
        color_val = max(0, contrast_factor + brightness)
        self.image_display.color = (color_val, color_val, color_val, 1)

    def toggle_view(self, instance):
        if self.screen_manager.current == 'image_viewer':
            self.screen_manager.current = 'chatbot'
            self.toggle_button.text = "Switch to Image Viewer"
        else:
            self.screen_manager.current = 'image_viewer'
            self.toggle_button.text = "Switch to Chatbot"

    def send_message(self, instance):
        user_message = self.chat_input.text.strip()
        if user_message:
            self.chat_history_grid.add_widget(MessageBubble(text=user_message, is_user=True))
            thinking_bubble = MessageBubble(text="Thinking...", is_user=False)
            self.chat_history_grid.add_widget(thinking_bubble)
            self.chat_input.text = ""
            threading.Thread(target=self.query_gemini, args=(user_message, thinking_bubble)).start()

    def query_gemini(self, user_message, thinking_bubble):
        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={GEMINI_API_KEY}"
        headers = {"Content-Type": "application/json"}
        
        system_prompt = ("You are a helpful AI assistant specializing in radiology. Answer questions clearly and concisely. "
                         "Do not provide medical advice. If asked for medical advice, state that you are an AI and "
                         "cannot provide it, and recommend consulting a human doctor.")
        payload = {
            "contents": [{"parts": [{"text": user_message}]}],
            "systemInstruction": {"parts": [{"text": system_prompt}]}
        }

        try:
            response = requests.post(api_url, headers=headers, data=json.dumps(payload), timeout=20)
            response.raise_for_status()
            result = response.json()
            
            candidate = result.get('candidates', [{}])[0]
            content = candidate.get('content', {}).get('parts', [{}])[0]
            ai_response = content.get('text', "Sorry, I couldn't process that.")

        except requests.exceptions.RequestException as e:
            ai_response = f"Network Error: Could not connect to the AI service."
        except Exception as e:
            ai_response = f"An unexpected error occurred: {e}"

        Clock.schedule_once(lambda dt: self.update_chat_from_gemini(ai_response, thinking_bubble))

    def update_chat_from_gemini(self, ai_response, thinking_bubble):
        self.chat_history_grid.remove_widget(thinking_bubble)
        self.chat_history_grid.add_widget(MessageBubble(text=ai_response, is_user=False))

    def open_file_chooser(self, instance):
        filechooser = FileChooserListView(path=".")
        filechooser.bind(selection=lambda *x: self.load_image(filechooser.selection))
        self.popup = Popup(title="Choose an Image", content=filechooser, size_hint=(0.9, 0.9))
        self.popup.open()

    def load_image(self, selection):
        if selection:
            self.image_display.source = selection[0]
            self.analysis_result.text = "Image loaded. Ready for analysis."
            self.brightness_slider.value = 0
            self.contrast_slider.value = 0
            self.image_display.color = (1, 1, 1, 1)
            self.popup.dismiss()

    def run_ai_analysis(self, instance):
        if not self.image_display.source:
            self.analysis_result.text = "[color=ff3333]Please load an image first.[/color]"
            return
        self.analysis_result.text = "Analyzing...\nPlease wait."
        findings = ["No abnormalities detected.", "Potential nodule in upper left lobe.", "Minor inflammation consistent with bronchitis."]
        confidence = f"{random.randint(85, 99)}%"
        chosen_finding = random.choice(findings)
        result_text = f"[b]Result:[/b]\n{chosen_finding}\n\n[b]Confidence:[/b] {confidence}"
        self.analysis_result.text = result_text
        self.save_analysis_to_firebase(self.image_display.source, chosen_finding, confidence)

    def save_analysis_to_firebase(self, image_path, finding, confidence):
        if not self.db:
            self.analysis_result.text += "\n\n[color=ff3333]Cloud save failed.[/color]"
            return
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data = {"image_path": image_path, "finding": finding, "confidence": confidence, "timestamp": timestamp}
            self.db.child("analyses").push(data)
            self.analysis_result.text += "\n\n[color=33ff33]Analysis saved to cloud.[/color]"
        except Exception as e:
            self.analysis_result.text += f"\n\n[color=ff3333]Error: {e}[/color]"

if __name__ == '__main__':
    RadiologyAssistant().run()

